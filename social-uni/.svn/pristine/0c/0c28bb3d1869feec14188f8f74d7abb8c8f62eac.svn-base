package com.connectik.cloverlead.dao;

import com.connectik.cloverlead.model.Company;
import com.connectik.cloverlead.model.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.Collection;
import java.util.List;

public interface UserRepository extends JpaRepository<User, Long> {

    @Query(value = "SELECT u FROM users u " +
            "LEFT JOIN FETCH u.company " +
            "LEFT JOIN FETCH u.education " +
            "LEFT JOIN FETCH u.phoneNumbers " +
            "LEFT JOIN FETCH u.professionalAssociations " +
            "LEFT JOIN FETCH u.specialties " +
            "LEFT JOIN FETCH u.industries " +
            "LEFT JOIN FETCH u.languages " +
            "WHERE u.username = :username")
    User findOneByUsername(@Param("username") String username);

    @Query("SELECT u FROM users u " +
            "LEFT JOIN FETCH u.company " +
            "LEFT JOIN FETCH u.education " +
            "LEFT JOIN FETCH u.phoneNumbers " +
            "LEFT JOIN FETCH u.professionalAssociations " +
            "LEFT JOIN FETCH u.specialties " +
            "LEFT JOIN FETCH u.industries " +
            "LEFT JOIN FETCH u.languages " +
            "WHERE u.id = :id ")
    User findOneById(@Param("id") Long id);

    @Query(value = "SELECT uc.company FROM user_company uc WHERE uc.user.id = :user_id ")
    Page<Company> getCompanies(@Param("user_id") Long id, Pageable pageable);

    @Query("SELECT u FROM users u WHERE lower(firstName) like %:query% OR lower(lastName) like %:query%")
    Page<User> find(@Param("query") String query, Pageable pageable);

    @Query("SELECT DISTINCT u FROM users u " +
            "LEFT JOIN FETCH u.company " +
            "LEFT JOIN FETCH u.education " +
            "LEFT JOIN FETCH u.phoneNumbers " +
            "LEFT JOIN FETCH u.professionalAssociations " +
            "LEFT JOIN FETCH u.specialties " +
            "LEFT JOIN FETCH u.industries " +
            "LEFT JOIN FETCH u.languages " +
            "WHERE u.id in (:ids) ")
    List<User> fetchAdditionalInfo(@Param("ids") Collection<Long> ids);


}
