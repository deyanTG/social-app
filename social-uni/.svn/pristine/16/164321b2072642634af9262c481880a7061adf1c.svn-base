SET FOREIGN_KEY_CHECKS = 0;
drop table if exists users;
drop table if exists chamber;
drop table if exists company;
drop table if exists user_company;
drop table if exists persistent_logins;
drop table if exists company_industry;
drop table if exists verification_token;
drop table if exists audit_record;
drop table if exists password_reset_token;
drop table if exists user_phone_number;
drop table if exists user_professional_association;
drop table if exists user_education;
drop table if exists user_language;
drop table if exists UserConnection;
drop table if exists company_specialty;
drop table if exists company_interest;
drop table if exists company_sector;
drop table if exists company_photo;
drop table if exists company_video;
drop table if exists opportunity;
drop table if exists opportunity_keyword;
drop table if exists opportunity_specialty;
drop table if exists user_industry;
SET FOREIGN_KEY_CHECKS = 1;

CREATE TABLE IF NOT EXISTS users (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  bio text DEFAULT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  enabled bool DEFAULT TRUE,
  expert bool DEFAULT FALSE,
  first_name varchar(255) DEFAULT NULL,
  last_name varchar(255) DEFAULT NULL,
  password varchar(255) DEFAULT NULL,
  provider varchar(255) DEFAULT NULL,
  role varchar(255) DEFAULT 'COMPANY_USER',
  title text DEFAULT NULL,
  position text DEFAULT NULL,
  username varchar(255) DEFAULT NULL,
  organisation text,
  fax text,
  avatar text,
  city text,
  state text,
  country text,
  zip text,
  street1 text,
  street2 text,
  geo_location text,
  PRIMARY KEY (id),
  UNIQUE KEY UK_user_username (username)
);


CREATE TABLE IF NOT EXISTS chamber
(
    id bigint(20) NOT NULL AUTO_INCREMENT,
    name varchar(255) DEFAULT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS company
(
    id bigint(20) NOT NULL AUTO_INCREMENT,
    name text DEFAULT NULL,
    chamber_id bigint(20) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT(20),
    updated_by BIGINT(20),
    description text,
    logo text,
    background_photo text,
    internal_url text,
    fax text,
    phone text,
    type_size text,
    year_founded int,
    website text,
    chamber_join_date DATE,
    city text,
    state text,
    country text,
    zip text,
    street1 text,
    street2 text,
    geo_location text,
    PRIMARY KEY (id),
    CONSTRAINT FK_company_chamber FOREIGN KEY (chamber_id) REFERENCES chamber (id) ON DELETE SET NULL,
    CONSTRAINT FK_company_users_created FOREIGN KEY (created_by) REFERENCES users (id) ON DELETE SET NULL,
    CONSTRAINT FK_company_users_updated FOREIGN KEY (updated_by) REFERENCES users (id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS user_company
(
    id bigint(20) NOT NULL AUTO_INCREMENT,
    user_id bigint(20) DEFAULT NULL,
    company_id bigint(20) DEFAULT NULL,
    admin Bool DEFAULT 0,
    PRIMARY KEY (id),
    CONSTRAINT UC_usercompanies_users UNIQUE (user_id), -- temp for user to have only one company
    CONSTRAINT FK_usercompanies_users FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT FK_usercompanies_company FOREIGN KEY (company_id) REFERENCES company (id)  ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS persistent_logins (
    usersname VARCHAR(64) NOT NULL,
    series VARCHAR(64) NOT NULL,
    token VARCHAR(64) NOT NULL,
    last_used TIMESTAMP NOT NULL,
    PRIMARY KEY (series)
);

CREATE TABLE IF NOT EXISTS company_industry
(
    company_id bigint(20) NOT NULL,
    industry text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_industry_company FOREIGN KEY (company_id) REFERENCES company (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS verification_token (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    user_id bigint(20)  NOT NULL,
    token varchar(255)  NOT NULL,
    expiry_date TIMESTAMP  NOT NULL,
    used BOOL DEFAULT FALSE,
    PRIMARY KEY (id),
    CONSTRAINT FK_verification_token_users FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE NO ACTION,
    CONSTRAINT token_unique_index UNIQUE (token)
);

CREATE TABLE IF NOT EXISTS audit_record
(
    id bigint(20) NOT NULL AUTO_INCREMENT,
    request_type varchar(255) DEFAULT NULL,
    requestParam_loginProvider varchar(255),
    request_param_id int,
    request_param_query text,
    request_param_supply text,
    request_param_demand text,
    request_param_description text,
    request_param_to_be_refined text,
    request_param_login_provider text,
    user_id bigint(20) NULL,
    session_id varchar(255) DEFAULT NULL,
    ip_address varchar(255) DEFAULT NULL,
    user_agent varchar(255) DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id),
    CONSTRAINT FK_audit_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS password_reset_token (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    user_id bigint(20)  NOT NULL,
    token varchar(255)  NOT NULL,
    expiry_date TIMESTAMP  NOT NULL,
    used BOOL DEFAULT FALSE,
    PRIMARY KEY (id),
    CONSTRAINT FK_password_reset_token_users FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE NO ACTION,
    CONSTRAINT password_reset_token_index UNIQUE (token)
);

CREATE TABLE IF NOT EXISTS user_phone_number
(
    user_id bigint(20) NOT NULL,
    number text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_user_phone_number FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_professional_association
(
    user_id bigint(20) NOT NULL,
    association text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_user_professional_association FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_education
(
    user_id bigint(20) NOT NULL,
    education varchar(255) DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_user_education FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_language
(
    user_id bigint(20) NOT NULL,
    language varchar(255) DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_user_language FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

-- CREATE TABLE IF NOT EXISTS favourite_search
-- (
--    id bigint(20) NOT NULL AUTO_INCREMENT,
--     type varchar(255),
--     name varchar(255),
--     description text,
--     created_at TIMESTAMP DEFAULT now(),
--     created_by BIGINT(20),
--     params text NOT NULL,
--     PRIMARY KEY (id),
--     CONSTRAINT FK_favourite_search FOREIGN KEY (user_id) REFERENCES users (id)
-- );

create table  IF NOT EXISTS UserConnection (userId varchar(255) not null,
	providerId varchar(255) not null,
	providerUserId varchar(255),
	rank int not null,
	displayName varchar(255),
	profileUrl varchar(512),
	imageUrl varchar(512),
	accessToken varchar(512) not null,
	secret varchar(512),
	refreshToken varchar(512),
	expireTime bigint,
	primary key (userId, providerId, providerUserId));
create unique index UserConnectionRank on UserConnection(userId, providerId, rank);

CREATE TABLE IF NOT EXISTS company_specialty
(
    company_id bigint(20) NOT NULL,
    specialty text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_specialty_company FOREIGN KEY (company_id) REFERENCES company (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS company_interest
(
    company_id bigint(20) NOT NULL,
    interest text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_interest_company FOREIGN KEY (company_id) REFERENCES company (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS company_sector
(
    company_id bigint(20) NOT NULL,
    sector text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_sector_company FOREIGN KEY (company_id) REFERENCES company (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS company_photo
(
    company_id bigint(20) NOT NULL,
    photo text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_photo_company FOREIGN KEY (company_id) REFERENCES company (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS company_video
(
    company_id bigint(20) NOT NULL,
    video text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_video_company FOREIGN KEY (company_id) REFERENCES company (id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS opportunity
(
    id bigint(20) NOT NULL AUTO_INCREMENT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by BIGINT(20),
    updated_by BIGINT(20),
    company_id BIGINT(20),
    title text,
    type text,
    category text,
    description text,
    start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    end_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estimated_value_currency text,
    estimated_value INT,
    city text,
  	state text,
  	country text,
  	zip text,
  	street1 text,
  	street2 text,
  	geo_location text,
    PRIMARY KEY (id),
    CONSTRAINT FK_opportunity_company FOREIGN KEY (company_id) REFERENCES company (id) ON DELETE SET NULL,
    CONSTRAINT FK_opportunity_created FOREIGN KEY (created_by) REFERENCES users (id) ON DELETE SET NULL,
    CONSTRAINT FK_opportunity_updated FOREIGN KEY (updated_by) REFERENCES users (id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS opportunity_keyword
(
    opportunity_id bigint(20) NOT NULL,
    keyword text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_opportunity_keyword FOREIGN KEY (opportunity_id) REFERENCES opportunity (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS opportunity_specialty
(
    opportunity_id bigint(20) NOT NULL,
    specialty text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_opportunity_specialty FOREIGN KEY (opportunity_id) REFERENCES opportunity (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_specialty
(
    user_id bigint(20) NOT NULL,
    specialty text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_user_specialty FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_industry
(
    user_id bigint(20) NOT NULL,
    industry text DEFAULT NULL,
    order_seq int,
    CONSTRAINT FK_user_industry FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);
