package com.connectik.cloverlead;

import com.connectik.cloverlead.exception.ItemNotFoundException;
import org.jsondoc.spring.boot.starter.EnableJSONDoc;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.web.DefaultErrorAttributes;
import org.springframework.boot.autoconfigure.web.ErrorAttributes;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.request.RequestAttributes;

import java.util.Map;

/**
 * Created by Tan on 18-Apr-16. Spring Boot Launcher
 */
@SpringBootApplication
@EnableJSONDoc
public class Application {

	public interface Constants {
		int DEFAULT_PAGE_SIZE = 10;
		String DEFAULT_PAGE_SIZE_STR = "10";
		String HTTP_STATUS_CODE = "javax.servlet.error.status_code";
		int REMEMBER_ME_IN_SECONDS = 86400;
		String REMEMBER_ME_COOKIE_NAME = "remember-me";
		int MAXIMUM_SESSIONS_ALLOWED = 1;
		int VERIFICATION_TOKEN_EXPIRATION = 60 * 24;
	}

	public static void main(String[] args) {
		ApplicationContext ctx = SpringApplication.run(Application.class, args);

	}

    @Bean
    public ErrorAttributes errorAttributes() {
        return new DefaultErrorAttributes() {
            @Override
            public Map<String, Object> getErrorAttributes(RequestAttributes requestAttributes,
                                                          boolean includeStackTrace) {

                HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR; // set default to 500
                Throwable error = super.getError(requestAttributes);
                if (error.getClass().isAssignableFrom(ItemNotFoundException.class)) {
                    status = HttpStatus.NOT_FOUND;
                } else if (error.getClass().isAssignableFrom(IllegalArgumentException.class)) {
                    status = HttpStatus.BAD_REQUEST;
                }
                requestAttributes.setAttribute(Constants.HTTP_STATUS_CODE, status.value(), 0);
                return super.getErrorAttributes(requestAttributes, includeStackTrace);
            }

        };
    }
}
